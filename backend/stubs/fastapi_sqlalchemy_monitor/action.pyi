import logging
from abc import ABC, abstractmethod

from .statistics import AlchemyStatistics

class Action(ABC):
    @abstractmethod
    def handle(self, statistics: AlchemyStatistics) -> None: ...

class ConditionalAction(Action):
    def handle(self, statistics: AlchemyStatistics) -> None: ...
    @abstractmethod
    def _condition(self, statistics: AlchemyStatistics) -> bool: ...
    @abstractmethod
    def _handle(self, statistics: AlchemyStatistics) -> None: ...

class LogStatistics(Action):
    def __init__(self, log_level: int = logging.INFO) -> None: ...
    def handle(self, statistics: AlchemyStatistics) -> None: ...

class PrintStatistics(Action):
    def handle(self, statistics: AlchemyStatistics) -> None: ...

class MaxTotalInvocationAction(ConditionalAction):
    def __init__(self, max_invocations: int, log_level: int | None = None) -> None: ...
    def _condition(self, statistics: AlchemyStatistics) -> bool: ...
    def _handle(self, statistics: AlchemyStatistics) -> None: ...

class WarnMaxTotalInvocation(MaxTotalInvocationAction):
    def __init__(self, max_invocations: int) -> None: ...

class ErrorMaxTotalInvocation(MaxTotalInvocationAction):
    def __init__(self, max_invocations: int) -> None: ...

class RaiseMaxTotalInvocation(MaxTotalInvocationAction):
    def __init__(self, max_invocations: int) -> None: ...
