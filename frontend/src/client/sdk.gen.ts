// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { MetricsListMetricsData, MetricsListMetricsResponse, MetricsGetMetricData, MetricsGetMetricResponse, MetricsGetMetricError, MetricsGetMetricExecutionsData, MetricsGetMetricExecutionsResponse, MetricsGetMetricExecutionsError, ExecutionsListExecutionsData, ExecutionsListExecutionsResponse, ExecutionsListExecutionsError, ExecutionsGetExecutionGroupData, ExecutionsGetExecutionGroupResponse, ExecutionsGetExecutionGroupError, ExecutionsGetExecutionResultData, ExecutionsGetExecutionResultResponse, ExecutionsGetExecutionResultError, ExecutionsGetExecutionResultDatasetsData, ExecutionsGetExecutionResultDatasetsResponse, ExecutionsGetExecutionResultDatasetsError, ExecutionsGetExecutionResultLogsData, ExecutionsGetExecutionResultLogsError, ExecutionsGetMetricBundleData, ExecutionsGetMetricBundleResponse, ExecutionsGetMetricBundleError, ExecutionsGetMetricValuesData, ExecutionsGetMetricValuesResponse, ExecutionsGetMetricValuesError, ResultsGetResultData, ResultsGetResultError, UtilsHealthCheckData, UtilsHealthCheckResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List Metrics
 * List the currently registered metrics
 */
export const metricsListMetrics = <ThrowOnError extends boolean = false>(options?: Options<MetricsListMetricsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MetricsListMetricsResponse, unknown, ThrowOnError>({
        url: '/api/v1/metrics/',
        ...options
    });
};

/**
 * Get Metric
 * Fetch a result using the slug
 */
export const metricsGetMetric = <ThrowOnError extends boolean = false>(options: Options<MetricsGetMetricData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MetricsGetMetricResponse, MetricsGetMetricError, ThrowOnError>({
        url: '/api/v1/metrics/{provider_slug}/{metric_slug}',
        ...options
    });
};

/**
 * Get Metric Executions
 * Fetch a result using the slug
 */
export const metricsGetMetricExecutions = <ThrowOnError extends boolean = false>(options: Options<MetricsGetMetricExecutionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MetricsGetMetricExecutionsResponse, MetricsGetMetricExecutionsError, ThrowOnError>({
        url: '/api/v1/metrics/{provider_slug}/{metric_slug}/executions',
        ...options
    });
};

/**
 * List Executions
 * List the most recent executions
 */
export const executionsListExecutions = <ThrowOnError extends boolean = false>(options?: Options<ExecutionsListExecutionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ExecutionsListExecutionsResponse, ExecutionsListExecutionsError, ThrowOnError>({
        url: '/api/v1/executions/',
        ...options
    });
};

/**
 * Get Execution Group
 * Inspect a specific execution
 */
export const executionsGetExecutionGroup = <ThrowOnError extends boolean = false>(options: Options<ExecutionsGetExecutionGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExecutionsGetExecutionGroupResponse, ExecutionsGetExecutionGroupError, ThrowOnError>({
        url: '/api/v1/executions/{group_id}',
        ...options
    });
};

/**
 * Get Execution Result
 * Inspect a specific execution result
 */
export const executionsGetExecutionResult = <ThrowOnError extends boolean = false>(options: Options<ExecutionsGetExecutionResultData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExecutionsGetExecutionResultResponse, ExecutionsGetExecutionResultError, ThrowOnError>({
        url: '/api/v1/executions/{group_id}/result/{result_id}',
        ...options
    });
};

/**
 * Get Execution Result Datasets
 * Query the datasets that were used for a specific execution
 */
export const executionsGetExecutionResultDatasets = <ThrowOnError extends boolean = false>(options: Options<ExecutionsGetExecutionResultDatasetsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExecutionsGetExecutionResultDatasetsResponse, ExecutionsGetExecutionResultDatasetsError, ThrowOnError>({
        url: '/api/v1/executions/{group_id}/result/{result_id}/datasets',
        ...options
    });
};

/**
 * Get Execution Result Logs
 * Fetch the logs for an execution result
 */
export const executionsGetExecutionResultLogs = <ThrowOnError extends boolean = false>(options: Options<ExecutionsGetExecutionResultLogsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, ExecutionsGetExecutionResultLogsError, ThrowOnError>({
        url: '/api/v1/executions/{group_id}/result/{result_id}/logs',
        ...options
    });
};

/**
 * Get Metric Bundle
 * Fetch a result using the slug
 */
export const executionsGetMetricBundle = <ThrowOnError extends boolean = false>(options: Options<ExecutionsGetMetricBundleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExecutionsGetMetricBundleResponse, ExecutionsGetMetricBundleError, ThrowOnError>({
        url: '/api/v1/executions/{group_id}/result/{result_id}/metric_bundle',
        ...options
    });
};

/**
 * Get Metric Values
 * Fetch a result using the slug
 */
export const executionsGetMetricValues = <ThrowOnError extends boolean = false>(options: Options<ExecutionsGetMetricValuesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExecutionsGetMetricValuesResponse, ExecutionsGetMetricValuesError, ThrowOnError>({
        url: '/api/v1/executions/{group_id}/result/{result_id}/values',
        ...options
    });
};

/**
 * Get Result
 * Fetch a result
 */
export const resultsGetResult = <ThrowOnError extends boolean = false>(options: Options<ResultsGetResultData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, ResultsGetResultError, ThrowOnError>({
        url: '/api/v1/results/{result_id}',
        ...options
    });
};

/**
 * Health Check
 */
export const utilsHealthCheck = <ThrowOnError extends boolean = false>(options?: Options<UtilsHealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UtilsHealthCheckResponse, unknown, ThrowOnError>({
        url: '/api/v1/utils/health-check/',
        ...options
    });
};