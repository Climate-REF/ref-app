// This file is auto-generated by @hey-api/openapi-ts

import { type Options, diagnosticsList, diagnosticsGet, diagnosticsListExecutionGroups, diagnosticsListMetricValues, executionsList, executionsGet, executionsExecution, executionsExecutionDatasets, executionsExecutionLogs, executionsMetricBundle, executionsMetricValues, resultsGetResult, utilsHealthCheck } from '../sdk.gen';
import { queryOptions } from '@tanstack/react-query';
import type { DiagnosticsListData, DiagnosticsGetData, DiagnosticsListExecutionGroupsData, DiagnosticsListMetricValuesData, ExecutionsListData, ExecutionsGetData, ExecutionsExecutionData, ExecutionsExecutionDatasetsData, ExecutionsExecutionLogsData, ExecutionsMetricBundleData, ExecutionsMetricValuesData, ResultsGetResultData, UtilsHealthCheckData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const diagnosticsListQueryKey = (options?: Options<DiagnosticsListData>) => createQueryKey('diagnosticsList', options);

export const diagnosticsListOptions = (options?: Options<DiagnosticsListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await diagnosticsList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: diagnosticsListQueryKey(options)
    });
};

export const diagnosticsGetQueryKey = (options: Options<DiagnosticsGetData>) => createQueryKey('diagnosticsGet', options);

export const diagnosticsGetOptions = (options: Options<DiagnosticsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await diagnosticsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: diagnosticsGetQueryKey(options)
    });
};

export const diagnosticsListExecutionGroupsQueryKey = (options: Options<DiagnosticsListExecutionGroupsData>) => createQueryKey('diagnosticsListExecutionGroups', options);

export const diagnosticsListExecutionGroupsOptions = (options: Options<DiagnosticsListExecutionGroupsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await diagnosticsListExecutionGroups({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: diagnosticsListExecutionGroupsQueryKey(options)
    });
};

export const diagnosticsListMetricValuesQueryKey = (options: Options<DiagnosticsListMetricValuesData>) => createQueryKey('diagnosticsListMetricValues', options);

export const diagnosticsListMetricValuesOptions = (options: Options<DiagnosticsListMetricValuesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await diagnosticsListMetricValues({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: diagnosticsListMetricValuesQueryKey(options)
    });
};

export const executionsListQueryKey = (options?: Options<ExecutionsListData>) => createQueryKey('executionsList', options);

export const executionsListOptions = (options?: Options<ExecutionsListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executionsList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executionsListQueryKey(options)
    });
};

export const executionsGetQueryKey = (options: Options<ExecutionsGetData>) => createQueryKey('executionsGet', options);

export const executionsGetOptions = (options: Options<ExecutionsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executionsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executionsGetQueryKey(options)
    });
};

export const executionsExecutionQueryKey = (options: Options<ExecutionsExecutionData>) => createQueryKey('executionsExecution', options);

export const executionsExecutionOptions = (options: Options<ExecutionsExecutionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executionsExecution({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executionsExecutionQueryKey(options)
    });
};

export const executionsExecutionDatasetsQueryKey = (options: Options<ExecutionsExecutionDatasetsData>) => createQueryKey('executionsExecutionDatasets', options);

export const executionsExecutionDatasetsOptions = (options: Options<ExecutionsExecutionDatasetsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executionsExecutionDatasets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executionsExecutionDatasetsQueryKey(options)
    });
};

export const executionsExecutionLogsQueryKey = (options: Options<ExecutionsExecutionLogsData>) => createQueryKey('executionsExecutionLogs', options);

export const executionsExecutionLogsOptions = (options: Options<ExecutionsExecutionLogsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executionsExecutionLogs({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executionsExecutionLogsQueryKey(options)
    });
};

export const executionsMetricBundleQueryKey = (options: Options<ExecutionsMetricBundleData>) => createQueryKey('executionsMetricBundle', options);

export const executionsMetricBundleOptions = (options: Options<ExecutionsMetricBundleData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executionsMetricBundle({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executionsMetricBundleQueryKey(options)
    });
};

export const executionsMetricValuesQueryKey = (options: Options<ExecutionsMetricValuesData>) => createQueryKey('executionsMetricValues', options);

export const executionsMetricValuesOptions = (options: Options<ExecutionsMetricValuesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executionsMetricValues({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executionsMetricValuesQueryKey(options)
    });
};

export const resultsGetResultQueryKey = (options: Options<ResultsGetResultData>) => createQueryKey('resultsGetResult', options);

export const resultsGetResultOptions = (options: Options<ResultsGetResultData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await resultsGetResult({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: resultsGetResultQueryKey(options)
    });
};

export const utilsHealthCheckQueryKey = (options?: Options<UtilsHealthCheckData>) => createQueryKey('utilsHealthCheck', options);

export const utilsHealthCheckOptions = (options?: Options<UtilsHealthCheckData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await utilsHealthCheck({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: utilsHealthCheckQueryKey(options)
    });
};