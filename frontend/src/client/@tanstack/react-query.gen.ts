// This file is auto-generated by @hey-api/openapi-ts

import { type Options, metricsListMetrics, metricsGetMetric, metricsGetMetricExecutions, metricsGetMetricValues, executionsListExecutions, executionsGetExecutionGroup, executionsGetExecutionResult, executionsGetExecutionResultDatasets, executionsGetExecutionResultLogs, resultsGetResult, utilsHealthCheck } from '../sdk.gen';
import { queryOptions } from '@tanstack/react-query';
import type { MetricsListMetricsData, MetricsGetMetricData, MetricsGetMetricExecutionsData, MetricsGetMetricValuesData, ExecutionsListExecutionsData, ExecutionsGetExecutionGroupData, ExecutionsGetExecutionResultData, ExecutionsGetExecutionResultDatasetsData, ExecutionsGetExecutionResultLogsData, ResultsGetResultData, UtilsHealthCheckData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const metricsListMetricsQueryKey = (options?: Options<MetricsListMetricsData>) => createQueryKey('metricsListMetrics', options);

export const metricsListMetricsOptions = (options?: Options<MetricsListMetricsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await metricsListMetrics({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: metricsListMetricsQueryKey(options)
    });
};

export const metricsGetMetricQueryKey = (options: Options<MetricsGetMetricData>) => createQueryKey('metricsGetMetric', options);

export const metricsGetMetricOptions = (options: Options<MetricsGetMetricData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await metricsGetMetric({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: metricsGetMetricQueryKey(options)
    });
};

export const metricsGetMetricExecutionsQueryKey = (options: Options<MetricsGetMetricExecutionsData>) => createQueryKey('metricsGetMetricExecutions', options);

export const metricsGetMetricExecutionsOptions = (options: Options<MetricsGetMetricExecutionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await metricsGetMetricExecutions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: metricsGetMetricExecutionsQueryKey(options)
    });
};

export const metricsGetMetricValuesQueryKey = (options: Options<MetricsGetMetricValuesData>) => createQueryKey('metricsGetMetricValues', options);

export const metricsGetMetricValuesOptions = (options: Options<MetricsGetMetricValuesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await metricsGetMetricValues({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: metricsGetMetricValuesQueryKey(options)
    });
};

export const executionsListExecutionsQueryKey = (options?: Options<ExecutionsListExecutionsData>) => createQueryKey('executionsListExecutions', options);

export const executionsListExecutionsOptions = (options?: Options<ExecutionsListExecutionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executionsListExecutions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executionsListExecutionsQueryKey(options)
    });
};

export const executionsGetExecutionGroupQueryKey = (options: Options<ExecutionsGetExecutionGroupData>) => createQueryKey('executionsGetExecutionGroup', options);

export const executionsGetExecutionGroupOptions = (options: Options<ExecutionsGetExecutionGroupData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executionsGetExecutionGroup({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executionsGetExecutionGroupQueryKey(options)
    });
};

export const executionsGetExecutionResultQueryKey = (options: Options<ExecutionsGetExecutionResultData>) => createQueryKey('executionsGetExecutionResult', options);

export const executionsGetExecutionResultOptions = (options: Options<ExecutionsGetExecutionResultData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executionsGetExecutionResult({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executionsGetExecutionResultQueryKey(options)
    });
};

export const executionsGetExecutionResultDatasetsQueryKey = (options: Options<ExecutionsGetExecutionResultDatasetsData>) => createQueryKey('executionsGetExecutionResultDatasets', options);

export const executionsGetExecutionResultDatasetsOptions = (options: Options<ExecutionsGetExecutionResultDatasetsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executionsGetExecutionResultDatasets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executionsGetExecutionResultDatasetsQueryKey(options)
    });
};

export const executionsGetExecutionResultLogsQueryKey = (options: Options<ExecutionsGetExecutionResultLogsData>) => createQueryKey('executionsGetExecutionResultLogs', options);

export const executionsGetExecutionResultLogsOptions = (options: Options<ExecutionsGetExecutionResultLogsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executionsGetExecutionResultLogs({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executionsGetExecutionResultLogsQueryKey(options)
    });
};

export const resultsGetResultQueryKey = (options: Options<ResultsGetResultData>) => createQueryKey('resultsGetResult', options);

export const resultsGetResultOptions = (options: Options<ResultsGetResultData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await resultsGetResult({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: resultsGetResultQueryKey(options)
    });
};

export const utilsHealthCheckQueryKey = (options?: Options<UtilsHealthCheckData>) => createQueryKey('utilsHealthCheck', options);

export const utilsHealthCheckOptions = (options?: Options<UtilsHealthCheckData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await utilsHealthCheck({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: utilsHealthCheckQueryKey(options)
    });
};