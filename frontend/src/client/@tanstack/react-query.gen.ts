// This file is auto-generated by @hey-api/openapi-ts

import { type Options, metricsListMetrics, metricsGetMetric, metricsGetMetricExecutions, metricsListMetricValues, executionsList, executionsGet, executionsResult, executionsResultDatasets, executionsResultLogs, executionsMetricBundle, executionsMetricValues, resultsGetResult, utilsHealthCheck } from '../sdk.gen';
import { queryOptions } from '@tanstack/react-query';
import type { MetricsListMetricsData, MetricsGetMetricData, MetricsGetMetricExecutionsData, MetricsListMetricValuesData, ExecutionsListData, ExecutionsGetData, ExecutionsResultData, ExecutionsResultDatasetsData, ExecutionsResultLogsData, ExecutionsMetricBundleData, ExecutionsMetricValuesData, ResultsGetResultData, UtilsHealthCheckData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const metricsListMetricsQueryKey = (options?: Options<MetricsListMetricsData>) => createQueryKey('metricsListMetrics', options);

export const metricsListMetricsOptions = (options?: Options<MetricsListMetricsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await metricsListMetrics({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: metricsListMetricsQueryKey(options)
    });
};

export const metricsGetMetricQueryKey = (options: Options<MetricsGetMetricData>) => createQueryKey('metricsGetMetric', options);

export const metricsGetMetricOptions = (options: Options<MetricsGetMetricData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await metricsGetMetric({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: metricsGetMetricQueryKey(options)
    });
};

export const metricsGetMetricExecutionsQueryKey = (options: Options<MetricsGetMetricExecutionsData>) => createQueryKey('metricsGetMetricExecutions', options);

export const metricsGetMetricExecutionsOptions = (options: Options<MetricsGetMetricExecutionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await metricsGetMetricExecutions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: metricsGetMetricExecutionsQueryKey(options)
    });
};

export const metricsListMetricValuesQueryKey = (options: Options<MetricsListMetricValuesData>) => createQueryKey('metricsListMetricValues', options);

export const metricsListMetricValuesOptions = (options: Options<MetricsListMetricValuesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await metricsListMetricValues({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: metricsListMetricValuesQueryKey(options)
    });
};

export const executionsListQueryKey = (options?: Options<ExecutionsListData>) => createQueryKey('executionsList', options);

export const executionsListOptions = (options?: Options<ExecutionsListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executionsList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executionsListQueryKey(options)
    });
};

export const executionsGetQueryKey = (options: Options<ExecutionsGetData>) => createQueryKey('executionsGet', options);

export const executionsGetOptions = (options: Options<ExecutionsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executionsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executionsGetQueryKey(options)
    });
};

export const executionsResultQueryKey = (options: Options<ExecutionsResultData>) => createQueryKey('executionsResult', options);

export const executionsResultOptions = (options: Options<ExecutionsResultData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executionsResult({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executionsResultQueryKey(options)
    });
};

export const executionsResultDatasetsQueryKey = (options: Options<ExecutionsResultDatasetsData>) => createQueryKey('executionsResultDatasets', options);

export const executionsResultDatasetsOptions = (options: Options<ExecutionsResultDatasetsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executionsResultDatasets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executionsResultDatasetsQueryKey(options)
    });
};

export const executionsResultLogsQueryKey = (options: Options<ExecutionsResultLogsData>) => createQueryKey('executionsResultLogs', options);

export const executionsResultLogsOptions = (options: Options<ExecutionsResultLogsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executionsResultLogs({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executionsResultLogsQueryKey(options)
    });
};

export const executionsMetricBundleQueryKey = (options: Options<ExecutionsMetricBundleData>) => createQueryKey('executionsMetricBundle', options);

export const executionsMetricBundleOptions = (options: Options<ExecutionsMetricBundleData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executionsMetricBundle({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executionsMetricBundleQueryKey(options)
    });
};

export const executionsMetricValuesQueryKey = (options: Options<ExecutionsMetricValuesData>) => createQueryKey('executionsMetricValues', options);

export const executionsMetricValuesOptions = (options: Options<ExecutionsMetricValuesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executionsMetricValues({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executionsMetricValuesQueryKey(options)
    });
};

export const resultsGetResultQueryKey = (options: Options<ResultsGetResultData>) => createQueryKey('resultsGetResult', options);

export const resultsGetResultOptions = (options: Options<ResultsGetResultData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await resultsGetResult({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: resultsGetResultQueryKey(options)
    });
};

export const utilsHealthCheckQueryKey = (options?: Options<UtilsHealthCheckData>) => createQueryKey('utilsHealthCheck', options);

export const utilsHealthCheckOptions = (options?: Options<UtilsHealthCheckData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await utilsHealthCheck({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: utilsHealthCheckQueryKey(options)
    });
};