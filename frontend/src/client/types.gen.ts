// This file is auto-generated by @hey-api/openapi-ts

export type AftDiagnosticDetail = {
    id: string;
    name: string;
    theme: string | null;
    version_control: string | null;
    reference_dataset: string | null;
    endorser: string | null;
    provider_link: string | null;
    description: string | null;
    short_description: string | null;
    diagnostics: Array<RefDiagnosticLink>;
};

export type AftDiagnosticSummary = {
    id: string;
    name: string;
    theme: string | null;
    version_control: string | null;
    reference_dataset: string | null;
    endorser: string | null;
    provider_link: string | null;
    description: string | null;
    short_description: string | null;
};

/**
 * CMEC diagnostic bundle object
 *
 * Contains the diagnostics calculated during a diagnostic execution, in a standardised format.
 */
export type CmecMetric = {
    DIMENSIONS: MetricDimensions;
    RESULTS: {
        [key: string]: unknown;
    };
    PROVENANCE?: {
        [key: string]: unknown;
    } | null;
    DISCLAIMER?: {
        [key: string]: unknown;
    } | null;
    NOTES?: {
        [key: string]: unknown;
    } | null;
    [key: string]: unknown | MetricDimensions | {
        [key: string]: unknown;
    } | ({
        [key: string]: unknown;
    } | null) | ({
        [key: string]: unknown;
    } | null) | ({
        [key: string]: unknown;
    } | null) | undefined;
};

export type Cmip6DatasetMetadata = {
    variable_id: string;
    source_id: string;
    experiment_id: string;
    variant_label: string;
};

export type CollectionDatasetReadable = {
    data: Array<Dataset>;
    total_count?: number | null;
    /**
     * Number of data items present
     */
    readonly count: number;
};

export type CollectionDatasetWritable = {
    data: Array<Dataset>;
    total_count?: number | null;
};

export type CollectionDiagnosticSummaryReadable = {
    data: Array<DiagnosticSummary>;
    total_count?: number | null;
    /**
     * Number of data items present
     */
    readonly count: number;
};

export type CollectionDiagnosticSummaryWritable = {
    data: Array<DiagnosticSummary>;
    total_count?: number | null;
};

export type CollectionExecutionGroupReadable = {
    data: Array<ExecutionGroup>;
    total_count?: number | null;
    /**
     * Number of data items present
     */
    readonly count: number;
};

export type CollectionExecutionGroupWritable = {
    data: Array<ExecutionGroup>;
    total_count?: number | null;
};

export type CollectionExecutionReadable = {
    data: Array<Execution>;
    total_count?: number | null;
    /**
     * Number of data items present
     */
    readonly count: number;
};

export type CollectionExecutionWritable = {
    data: Array<Execution>;
    total_count?: number | null;
};

export type Dataset = {
    id: number;
    slug: string;
    dataset_type: string;
    metadata: Cmip6DatasetMetadata | null;
    more_info_url: string | null;
};

/**
 * Summary information about a diagnostic.
 *
 * A diagnostic is a specific metric or set of metrics calculated by a provider.
 * Each diagnostic is associated may be associated with one CMIP Assessment Fast Track (AFT) diagnostics.
 */
export type DiagnosticSummary = {
    id: number;
    provider: ProviderSummary;
    slug: string;
    name: string;
    description: string;
    execution_groups: Array<number>;
    has_metric_values: boolean;
    has_scalar_values: boolean;
    has_series_values: boolean;
    execution_count: number;
    successful_execution_count: number;
    execution_group_count: number;
    successful_execution_group_count: number;
    group_by: Array<GroupBy>;
    aft_link: AftDiagnosticDetail | null;
    reference_datasets?: Array<ReferenceDatasetLink> | null;
    tags?: Array<string> | null;
};

export type Execution = {
    id: number;
    dataset_hash: string;
    dataset_count: number;
    successful: boolean;
    retracted: boolean;
    created_at: string;
    updated_at: string;
    outputs: Array<ExecutionOutput>;
    execution_group: ExecutionGroupSummary;
};

export type ExecutionGroup = {
    id: number;
    key: string;
    dirty: boolean;
    executions: Array<ExecutionSummary>;
    latest_execution: ExecutionSummary | null;
    selectors: {
        [key: string]: Array<[
            string,
            string
        ]>;
    };
    diagnostic: DiagnosticSummary;
    created_at: string;
    updated_at: string;
};

export type ExecutionGroupSummary = {
    id: number;
    key: string;
    dirty: boolean;
    selectors: {
        [key: string]: Array<[
            string,
            string
        ]>;
    };
    diagnostic: DiagnosticSummary;
    created_at: string;
    updated_at: string;
};

export type ExecutionOutput = {
    id: number;
    execution_id: number;
    output_type: ResultOutputType;
    filename: string;
    short_name: string;
    long_name: string;
    description: string;
    created_at: string;
    updated_at: string;
    url: string;
};

/**
 * Statistics for execution groups and their success rates.
 */
export type ExecutionStatsReadable = {
    total_execution_groups: number;
    successful_execution_groups: number;
    failed_execution_groups: number;
    scalar_value_count: number;
    series_value_count: number;
    total_datasets: number;
    total_files: number;
    /**
     * Success rate as a percentage (0-100).
     */
    readonly success_rate_percentage: number;
};

/**
 * Statistics for execution groups and their success rates.
 */
export type ExecutionStatsWritable = {
    total_execution_groups: number;
    successful_execution_groups: number;
    failed_execution_groups: number;
    scalar_value_count: number;
    series_value_count: number;
    total_datasets: number;
    total_files: number;
};

export type ExecutionSummary = {
    id: number;
    dataset_hash: string;
    dataset_count: number;
    successful: boolean;
    retracted: boolean;
    created_at: string;
    updated_at: string;
    outputs: Array<ExecutionOutput>;
};

export type Facet = {
    key: string;
    values: Array<string>;
};

export type GroupBy = {
    source_type: string;
    group_by: Array<string> | null;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * CMEC diagnostic bundle DIMENSIONS object
 *
 * This describes the order of the dimensions and their possible values.
 * The order of the dimensions matter as that determines how the executions are nested.
 */
export type MetricDimensions = {
    [key: string]: unknown;
};

export type MetricValueCollection = {
    data: Array<ScalarValue | SeriesValue>;
    count: number;
    facets: Array<Facet>;
    types: Array<string>;
    had_outliers?: boolean | null;
    outlier_count?: number | null;
};

/**
 * Summary of the dimensions used in a metric value collection.
 */
export type MetricValueFacetSummary = {
    dimensions: {
        [key: string]: Array<string>;
    };
    count: number;
};

/**
 * Type of metric values to query.
 */
export type MetricValueType = 'scalar' | 'series';

/**
 * Summary information about a Metric Provider.
 *
 * The diagnostic provider is the framework that was used to generate a set of metrics.
 */
export type ProviderSummary = {
    slug: string;
    name: string;
};

/**
 * Link to a specific diagnostic calculated by a provider.
 */
export type RefDiagnosticLink = {
    provider_slug: string;
    diagnostic_slug: string;
};

/**
 * Link to a reference dataset used by a diagnostic.
 *
 * Reference datasets are observational or reanalysis datasets that diagnostics
 * compare model outputs against. They can be classified by their role in the analysis.
 */
export type ReferenceDatasetLink = {
    /**
     * Unique identifier for the dataset(e.g., 'obs4mips.CERES-EBAF.v4.2')
     */
    slug: string;
    /**
     * Description of how this dataset is used in the diagnostic
     */
    description?: string | null;
    /**
     * Role of this reference dataset:
     * - 'primary': Main reference dataset for the diagnostic
     * - 'secondary': Additional reference for comparison or validation
     * - 'comparison': Used for comparative analysis
     */
    type: 'primary' | 'secondary' | 'comparison';
};

/**
 * Types of supported outputs
 *
 * These map to the categories of output in the CMEC output bundle
 */
export type ResultOutputType = 'plot' | 'data' | 'html';

/**
 * A flattened representation of a scalar diagnostic value
 *
 * This includes the dimensions and the value of the diagnostic
 */
export type ScalarValue = {
    dimensions: {
        [key: string]: string;
    };
    value: number | number;
    attributes?: {
        [key: string]: string | number | number;
    } | null;
    id: number;
    execution_group_id: number;
    execution_id: number;
    is_outlier?: boolean | null;
    verification_status?: ('verified' | 'unverified') | null;
};

/**
 * A flattened representation of a series diagnostic value
 *
 * This includes the dimensions, values array, index array, and index name
 */
export type SeriesValue = {
    id: number;
    dimensions: {
        [key: string]: string;
    };
    values: Array<number | null>;
    index?: Array<string | number> | null;
    index_name?: string | null;
    attributes?: {
        [key: string]: string | number;
    } | null;
    execution_group_id: number;
    execution_id: number;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type Cmip7AssessmentFastTrackAftListAftDiagnosticsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/cmip7-aft-diagnostics/';
};

export type Cmip7AssessmentFastTrackAftListAftDiagnosticsResponses = {
    /**
     * Successful Response
     */
    200: Array<AftDiagnosticSummary>;
};

export type Cmip7AssessmentFastTrackAftListAftDiagnosticsResponse = Cmip7AssessmentFastTrackAftListAftDiagnosticsResponses[keyof Cmip7AssessmentFastTrackAftListAftDiagnosticsResponses];

export type Cmip7AssessmentFastTrackAftGetAftDiagnosticData = {
    body?: never;
    path: {
        aft_id: string;
    };
    query?: never;
    url: '/api/v1/cmip7-aft-diagnostics/{aft_id}';
};

export type Cmip7AssessmentFastTrackAftGetAftDiagnosticErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type Cmip7AssessmentFastTrackAftGetAftDiagnosticError = Cmip7AssessmentFastTrackAftGetAftDiagnosticErrors[keyof Cmip7AssessmentFastTrackAftGetAftDiagnosticErrors];

export type Cmip7AssessmentFastTrackAftGetAftDiagnosticResponses = {
    /**
     * Successful Response
     */
    200: AftDiagnosticDetail;
};

export type Cmip7AssessmentFastTrackAftGetAftDiagnosticResponse = Cmip7AssessmentFastTrackAftGetAftDiagnosticResponses[keyof Cmip7AssessmentFastTrackAftGetAftDiagnosticResponses];

export type DatasetsListData = {
    body?: never;
    path?: never;
    query?: {
        offset?: number;
        limit?: number;
        /**
         * Filter datasets by name
         */
        name_contains?: string;
        /**
         * Filter datasets by the type of dataset
         */
        dataset_type?: string;
        /**
         * Filter datasets by facets (JSON string)
         */
        facets?: string;
    };
    url: '/api/v1/datasets/';
};

export type DatasetsListErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DatasetsListError = DatasetsListErrors[keyof DatasetsListErrors];

export type DatasetsListResponses = {
    /**
     * Successful Response
     */
    200: CollectionDatasetReadable;
};

export type DatasetsListResponse = DatasetsListResponses[keyof DatasetsListResponses];

export type DatasetsGetData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: never;
    url: '/api/v1/datasets/{slug}';
};

export type DatasetsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DatasetsGetError = DatasetsGetErrors[keyof DatasetsGetErrors];

export type DatasetsGetResponses = {
    /**
     * Successful Response
     */
    200: Dataset;
};

export type DatasetsGetResponse = DatasetsGetResponses[keyof DatasetsGetResponses];

export type DatasetsExecutionsData = {
    body?: never;
    path: {
        dataset_id: number;
    };
    query?: {
        offset?: number;
        limit?: number;
    };
    url: '/api/v1/datasets/{dataset_id}/executions';
};

export type DatasetsExecutionsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DatasetsExecutionsError = DatasetsExecutionsErrors[keyof DatasetsExecutionsErrors];

export type DatasetsExecutionsResponses = {
    /**
     * Successful Response
     */
    200: CollectionExecutionGroupReadable;
};

export type DatasetsExecutionsResponse = DatasetsExecutionsResponses[keyof DatasetsExecutionsResponses];

export type DiagnosticsListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/diagnostics/';
};

export type DiagnosticsListResponses = {
    /**
     * Successful Response
     */
    200: CollectionDiagnosticSummaryReadable;
};

export type DiagnosticsListResponse = DiagnosticsListResponses[keyof DiagnosticsListResponses];

export type DiagnosticsFacetsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/diagnostics/facets';
};

export type DiagnosticsFacetsResponses = {
    /**
     * Successful Response
     */
    200: MetricValueFacetSummary;
};

export type DiagnosticsFacetsResponse = DiagnosticsFacetsResponses[keyof DiagnosticsFacetsResponses];

export type DiagnosticsGetData = {
    body?: never;
    path: {
        provider_slug: string;
        diagnostic_slug: string;
    };
    query?: never;
    url: '/api/v1/diagnostics/{provider_slug}/{diagnostic_slug}';
};

export type DiagnosticsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DiagnosticsGetError = DiagnosticsGetErrors[keyof DiagnosticsGetErrors];

export type DiagnosticsGetResponses = {
    /**
     * Successful Response
     */
    200: DiagnosticSummary;
};

export type DiagnosticsGetResponse = DiagnosticsGetResponses[keyof DiagnosticsGetResponses];

export type DiagnosticsListExecutionGroupsData = {
    body?: never;
    path: {
        provider_slug: string;
        diagnostic_slug: string;
    };
    query?: never;
    url: '/api/v1/diagnostics/{provider_slug}/{diagnostic_slug}/execution_groups';
};

export type DiagnosticsListExecutionGroupsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DiagnosticsListExecutionGroupsError = DiagnosticsListExecutionGroupsErrors[keyof DiagnosticsListExecutionGroupsErrors];

export type DiagnosticsListExecutionGroupsResponses = {
    /**
     * Successful Response
     */
    200: CollectionExecutionGroupReadable;
};

export type DiagnosticsListExecutionGroupsResponse = DiagnosticsListExecutionGroupsResponses[keyof DiagnosticsListExecutionGroupsResponses];

export type DiagnosticsListExecutionsData = {
    body?: never;
    path: {
        provider_slug: string;
        diagnostic_slug: string;
    };
    query?: never;
    url: '/api/v1/diagnostics/{provider_slug}/{diagnostic_slug}/executions';
};

export type DiagnosticsListExecutionsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DiagnosticsListExecutionsError = DiagnosticsListExecutionsErrors[keyof DiagnosticsListExecutionsErrors];

export type DiagnosticsListExecutionsResponses = {
    /**
     * Successful Response
     */
    200: CollectionExecutionReadable;
};

export type DiagnosticsListExecutionsResponse = DiagnosticsListExecutionsResponses[keyof DiagnosticsListExecutionsResponses];

export type DiagnosticsListMetricValuesData = {
    body?: never;
    path: {
        provider_slug: string;
        diagnostic_slug: string;
    };
    query: {
        /**
         * Type of metric values to return
         */
        value_type: MetricValueType;
        format?: string | null;
        /**
         * Outlier detection method: 'off' or 'iqr'
         */
        detect_outliers?: 'off' | 'iqr';
        /**
         * Include unverified (outlier) values
         */
        include_unverified?: boolean;
        /**
         * Comma-separated list of metric value IDs to isolate
         */
        isolate_ids?: string | null;
        /**
         * Comma-separated list of metric value IDs to exclude
         */
        exclude_ids?: string | null;
    };
    url: '/api/v1/diagnostics/{provider_slug}/{diagnostic_slug}/values';
};

export type DiagnosticsListMetricValuesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DiagnosticsListMetricValuesError = DiagnosticsListMetricValuesErrors[keyof DiagnosticsListMetricValuesErrors];

export type DiagnosticsListMetricValuesResponses = {
    /**
     * Successful Response
     */
    200: MetricValueCollection;
};

export type DiagnosticsListMetricValuesResponse = DiagnosticsListMetricValuesResponses[keyof DiagnosticsListMetricValuesResponses];

export type ExecutionsGetExecutionStatisticsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/executions/statistics';
};

export type ExecutionsGetExecutionStatisticsResponses = {
    /**
     * Successful Response
     */
    200: ExecutionStatsReadable;
};

export type ExecutionsGetExecutionStatisticsResponse = ExecutionsGetExecutionStatisticsResponses[keyof ExecutionsGetExecutionStatisticsResponses];

export type ExecutionsListRecentExecutionGroupsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        diagnostic_name_contains?: string | null;
        provider_name_contains?: string | null;
        dirty?: boolean | null;
        successful?: boolean | null;
        source_id?: string | null;
    };
    url: '/api/v1/executions/';
};

export type ExecutionsListRecentExecutionGroupsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExecutionsListRecentExecutionGroupsError = ExecutionsListRecentExecutionGroupsErrors[keyof ExecutionsListRecentExecutionGroupsErrors];

export type ExecutionsListRecentExecutionGroupsResponses = {
    /**
     * Successful Response
     */
    200: CollectionExecutionGroupReadable;
};

export type ExecutionsListRecentExecutionGroupsResponse = ExecutionsListRecentExecutionGroupsResponses[keyof ExecutionsListRecentExecutionGroupsResponses];

export type ExecutionsGetData = {
    body?: never;
    path: {
        group_id: string;
    };
    query?: never;
    url: '/api/v1/executions/{group_id}';
};

export type ExecutionsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExecutionsGetError = ExecutionsGetErrors[keyof ExecutionsGetErrors];

export type ExecutionsGetResponses = {
    /**
     * Successful Response
     */
    200: ExecutionGroup;
};

export type ExecutionsGetResponse = ExecutionsGetResponses[keyof ExecutionsGetResponses];

export type ExecutionsExecutionData = {
    body?: never;
    path: {
        group_id: string;
    };
    query?: {
        execution_id?: string | null;
    };
    url: '/api/v1/executions/{group_id}/execution';
};

export type ExecutionsExecutionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExecutionsExecutionError = ExecutionsExecutionErrors[keyof ExecutionsExecutionErrors];

export type ExecutionsExecutionResponses = {
    /**
     * Successful Response
     */
    200: Execution;
};

export type ExecutionsExecutionResponse = ExecutionsExecutionResponses[keyof ExecutionsExecutionResponses];

export type ExecutionsExecutionDatasetsData = {
    body?: never;
    path: {
        group_id: string;
    };
    query?: {
        execution_id?: string | null;
    };
    url: '/api/v1/executions/{group_id}/datasets';
};

export type ExecutionsExecutionDatasetsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExecutionsExecutionDatasetsError = ExecutionsExecutionDatasetsErrors[keyof ExecutionsExecutionDatasetsErrors];

export type ExecutionsExecutionDatasetsResponses = {
    /**
     * Successful Response
     */
    200: CollectionDatasetReadable;
};

export type ExecutionsExecutionDatasetsResponse = ExecutionsExecutionDatasetsResponses[keyof ExecutionsExecutionDatasetsResponses];

export type ExecutionsExecutionLogsData = {
    body?: never;
    path: {
        group_id: string;
    };
    query?: {
        execution_id?: string | null;
    };
    url: '/api/v1/executions/{group_id}/logs';
};

export type ExecutionsExecutionLogsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExecutionsExecutionLogsError = ExecutionsExecutionLogsErrors[keyof ExecutionsExecutionLogsErrors];

export type ExecutionsExecutionLogsResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ExecutionsMetricBundleData = {
    body?: never;
    path: {
        group_id: string;
    };
    query?: {
        execution_id?: string | null;
    };
    url: '/api/v1/executions/{group_id}/metric_bundle';
};

export type ExecutionsMetricBundleErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExecutionsMetricBundleError = ExecutionsMetricBundleErrors[keyof ExecutionsMetricBundleErrors];

export type ExecutionsMetricBundleResponses = {
    /**
     * Successful Response
     */
    200: CmecMetric;
};

export type ExecutionsMetricBundleResponse = ExecutionsMetricBundleResponses[keyof ExecutionsMetricBundleResponses];

export type ExecutionsListMetricValuesData = {
    body?: never;
    path: {
        group_id: string;
    };
    query: {
        execution_id?: string | null;
        /**
         * Type of metric values to return
         */
        value_type: MetricValueType;
        format?: string | null;
        /**
         * Outlier detection method: 'off' or 'iqr'
         */
        detect_outliers?: 'off' | 'iqr';
        /**
         * Include unverified (outlier) values
         */
        include_unverified?: boolean;
        /**
         * Comma-separated list of metric value IDs to isolate
         */
        isolate_ids?: string | null;
        /**
         * Comma-separated list of metric value IDs to exclude
         */
        exclude_ids?: string | null;
    };
    url: '/api/v1/executions/{group_id}/values';
};

export type ExecutionsListMetricValuesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExecutionsListMetricValuesError = ExecutionsListMetricValuesErrors[keyof ExecutionsListMetricValuesErrors];

export type ExecutionsListMetricValuesResponses = {
    /**
     * Successful Response
     */
    200: MetricValueCollection;
};

export type ExecutionsListMetricValuesResponse = ExecutionsListMetricValuesResponses[keyof ExecutionsListMetricValuesResponses];

export type ExecutionsExecutionArchiveData = {
    body?: never;
    path: {
        group_id: string;
    };
    query?: {
        execution_id?: string | null;
    };
    url: '/api/v1/executions/{group_id}/archive';
};

export type ExecutionsExecutionArchiveErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExecutionsExecutionArchiveError = ExecutionsExecutionArchiveErrors[keyof ExecutionsExecutionArchiveErrors];

export type ExecutionsExecutionArchiveResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ResultsGetResultData = {
    body?: never;
    path: {
        result_id: number;
    };
    query?: never;
    url: '/api/v1/results/{result_id}';
};

export type ResultsGetResultErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ResultsGetResultError = ResultsGetResultErrors[keyof ResultsGetResultErrors];

export type ResultsGetResultResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UtilsHealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/utils/health-check/';
};

export type UtilsHealthCheckResponses = {
    /**
     * Successful Response
     */
    200: boolean;
};

export type UtilsHealthCheckResponse = UtilsHealthCheckResponses[keyof UtilsHealthCheckResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};