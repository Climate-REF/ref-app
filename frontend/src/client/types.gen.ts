// This file is auto-generated by @hey-api/openapi-ts

/**
 * CMEC diagnostic bundle object
 *
 * Contains the diagnostics calculated during a diagnostic execution, in a standardised format.
 */
export type CmecMetric = {
    DIMENSIONS: MetricDimensions;
    RESULTS: {
        [key: string]: unknown;
    };
    PROVENANCE?: {
        [key: string]: unknown;
    } | null;
    DISCLAIMER?: {
        [key: string]: unknown;
    } | null;
    NOTES?: {
        [key: string]: unknown;
    } | null;
    [key: string]: unknown | MetricDimensions | {
        [key: string]: unknown;
    } | ({
        [key: string]: unknown;
    } | null) | ({
        [key: string]: unknown;
    } | null) | ({
        [key: string]: unknown;
    } | null) | undefined;
};

export type Cmip6DatasetMetadata = {
    variable_id: string;
    source_id: string;
    experiment_id: string;
    variant_label: string;
};

export type CollectionDiagnosticSummary = {
    data: Array<DiagnosticSummary>;
};

export type CollectionExecutionGroup = {
    data: Array<ExecutionGroup>;
};

export type Dataset = {
    id: number;
    slug: string;
    dataset_type: string;
    metadata: Cmip6DatasetMetadata | null;
};

export type DatasetCollection = {
    data: Array<Dataset>;
    count: number;
};

/**
 * A unique provider
 */
export type DiagnosticSummary = {
    id: number;
    provider: ProviderSummary;
    slug: string;
    name: string;
    description: string;
    execution_groups: Array<number>;
    group_by: Array<GroupBy>;
};

export type Execution = {
    id: number;
    dataset_hash: string;
    dataset_count: number;
    successful: boolean;
    retracted: boolean;
    created_at: string;
    updated_at: string;
    outputs: Array<ExecutionOutput>;
};

export type ExecutionGroup = {
    id: number;
    key: string;
    executions: Array<Execution>;
    latest_execution: Execution;
    selectors: {
        [key: string]: Array<[
            string,
            string
        ]>;
    };
    diagnostic: DiagnosticSummary;
    created_at: string;
    updated_at: string;
};

export type ExecutionOutput = {
    id: number;
    execution_id: number;
    output_type: ResultOutputType;
    filename: string;
    short_name: string;
    long_name: string;
    description: string;
    created_at: string;
    updated_at: string;
    url: string;
};

export type Facet = {
    key: string;
    values: Array<string>;
};

export type GroupBy = {
    source_type: string;
    group_by: Array<string> | null;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * CMEC diagnostic bundle DIMENSIONS object
 *
 * This describes the order of the dimensions and their possible values.
 * The order of the dimensions matter as that determines how the executions are nested.
 */
export type MetricDimensions = {
    [key: string]: unknown;
};

/**
 * A flattened representation of a diagnostic value
 *
 * This includes the dimensions and the value of the diagnostic
 */
export type MetricValue = {
    dimensions: {
        [key: string]: string;
    };
    value: number | string;
    attributes?: {
        [key: string]: string | number | number;
    } | null;
    execution_group_id: number;
    execution_id: number;
};

export type MetricValueCollection = {
    data: Array<MetricValue>;
    count: number;
    facets: Array<Facet>;
};

/**
 * Summary information about a Metric Provider.
 *
 * The diagnostic provider is the framework that was used to generate a set of metrics.
 */
export type ProviderSummary = {
    slug: string;
    name: string;
};

/**
 * Types of supported outputs
 *
 * These map to the categories of output in the CMEC output bundle
 */
export type ResultOutputType = 'plot' | 'data' | 'html';

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type DiagnosticsListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/diagnostics/';
};

export type DiagnosticsListResponses = {
    /**
     * Successful Response
     */
    200: CollectionDiagnosticSummary;
};

export type DiagnosticsListResponse = DiagnosticsListResponses[keyof DiagnosticsListResponses];

export type DiagnosticsGetData = {
    body?: never;
    path: {
        provider_slug: string;
        diagnostic_slug: string;
    };
    query?: never;
    url: '/api/v1/diagnostics/{provider_slug}/{diagnostic_slug}';
};

export type DiagnosticsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DiagnosticsGetError = DiagnosticsGetErrors[keyof DiagnosticsGetErrors];

export type DiagnosticsGetResponses = {
    /**
     * Successful Response
     */
    200: DiagnosticSummary;
};

export type DiagnosticsGetResponse = DiagnosticsGetResponses[keyof DiagnosticsGetResponses];

export type DiagnosticsListExecutionGroupsData = {
    body?: never;
    path: {
        provider_slug: string;
        diagnostic_slug: string;
    };
    query?: never;
    url: '/api/v1/diagnostics/{provider_slug}/{diagnostic_slug}/executions';
};

export type DiagnosticsListExecutionGroupsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DiagnosticsListExecutionGroupsError = DiagnosticsListExecutionGroupsErrors[keyof DiagnosticsListExecutionGroupsErrors];

export type DiagnosticsListExecutionGroupsResponses = {
    /**
     * Successful Response
     */
    200: CollectionExecutionGroup;
};

export type DiagnosticsListExecutionGroupsResponse = DiagnosticsListExecutionGroupsResponses[keyof DiagnosticsListExecutionGroupsResponses];

export type DiagnosticsListMetricValuesData = {
    body?: never;
    path: {
        provider_slug: string;
        diagnostic_slug: string;
    };
    query?: never;
    url: '/api/v1/diagnostics/{provider_slug}/{diagnostic_slug}/values';
};

export type DiagnosticsListMetricValuesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DiagnosticsListMetricValuesError = DiagnosticsListMetricValuesErrors[keyof DiagnosticsListMetricValuesErrors];

export type DiagnosticsListMetricValuesResponses = {
    /**
     * Successful Response
     */
    200: MetricValueCollection;
};

export type DiagnosticsListMetricValuesResponse = DiagnosticsListMetricValuesResponses[keyof DiagnosticsListMetricValuesResponses];

export type ExecutionsListData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
    };
    url: '/api/v1/executions/';
};

export type ExecutionsListErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExecutionsListError = ExecutionsListErrors[keyof ExecutionsListErrors];

export type ExecutionsListResponses = {
    /**
     * Successful Response
     */
    200: CollectionExecutionGroup;
};

export type ExecutionsListResponse = ExecutionsListResponses[keyof ExecutionsListResponses];

export type ExecutionsGetData = {
    body?: never;
    path: {
        group_id: string;
    };
    query?: never;
    url: '/api/v1/executions/{group_id}';
};

export type ExecutionsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExecutionsGetError = ExecutionsGetErrors[keyof ExecutionsGetErrors];

export type ExecutionsGetResponses = {
    /**
     * Successful Response
     */
    200: ExecutionGroup;
};

export type ExecutionsGetResponse = ExecutionsGetResponses[keyof ExecutionsGetResponses];

export type ExecutionsExecutionData = {
    body?: never;
    path: {
        group_id: string;
    };
    query?: {
        execution_id?: string | null;
    };
    url: '/api/v1/executions/{group_id}/execution';
};

export type ExecutionsExecutionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExecutionsExecutionError = ExecutionsExecutionErrors[keyof ExecutionsExecutionErrors];

export type ExecutionsExecutionResponses = {
    /**
     * Successful Response
     */
    200: Execution;
};

export type ExecutionsExecutionResponse = ExecutionsExecutionResponses[keyof ExecutionsExecutionResponses];

export type ExecutionsExecutionDatasetsData = {
    body?: never;
    path: {
        group_id: string;
    };
    query?: {
        execution_id?: string | null;
    };
    url: '/api/v1/executions/{group_id}/datasets';
};

export type ExecutionsExecutionDatasetsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExecutionsExecutionDatasetsError = ExecutionsExecutionDatasetsErrors[keyof ExecutionsExecutionDatasetsErrors];

export type ExecutionsExecutionDatasetsResponses = {
    /**
     * Successful Response
     */
    200: DatasetCollection;
};

export type ExecutionsExecutionDatasetsResponse = ExecutionsExecutionDatasetsResponses[keyof ExecutionsExecutionDatasetsResponses];

export type ExecutionsExecutionLogsData = {
    body?: never;
    path: {
        group_id: string;
    };
    query?: {
        execution_id?: string | null;
    };
    url: '/api/v1/executions/{group_id}/logs';
};

export type ExecutionsExecutionLogsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExecutionsExecutionLogsError = ExecutionsExecutionLogsErrors[keyof ExecutionsExecutionLogsErrors];

export type ExecutionsExecutionLogsResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ExecutionsMetricBundleData = {
    body?: never;
    path: {
        group_id: string;
    };
    query?: {
        execution_id?: string | null;
    };
    url: '/api/v1/executions/{group_id}/metric_bundle';
};

export type ExecutionsMetricBundleErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExecutionsMetricBundleError = ExecutionsMetricBundleErrors[keyof ExecutionsMetricBundleErrors];

export type ExecutionsMetricBundleResponses = {
    /**
     * Successful Response
     */
    200: CmecMetric;
};

export type ExecutionsMetricBundleResponse = ExecutionsMetricBundleResponses[keyof ExecutionsMetricBundleResponses];

export type ExecutionsMetricValuesData = {
    body?: never;
    path: {
        group_id: string;
    };
    query?: {
        execution_id?: string | null;
    };
    url: '/api/v1/executions/{group_id}/values';
};

export type ExecutionsMetricValuesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExecutionsMetricValuesError = ExecutionsMetricValuesErrors[keyof ExecutionsMetricValuesErrors];

export type ExecutionsMetricValuesResponses = {
    /**
     * Successful Response
     */
    200: MetricValueCollection;
};

export type ExecutionsMetricValuesResponse = ExecutionsMetricValuesResponses[keyof ExecutionsMetricValuesResponses];

export type ExecutionsExecutionArchiveData = {
    body?: never;
    path: {
        group_id: string;
    };
    query?: {
        execution_id?: string | null;
    };
    url: '/api/v1/executions/{group_id}/archive';
};

export type ExecutionsExecutionArchiveErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExecutionsExecutionArchiveError = ExecutionsExecutionArchiveErrors[keyof ExecutionsExecutionArchiveErrors];

export type ExecutionsExecutionArchiveResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ResultsGetResultData = {
    body?: never;
    path: {
        result_id: number;
    };
    query?: never;
    url: '/api/v1/results/{result_id}';
};

export type ResultsGetResultErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ResultsGetResultError = ResultsGetResultErrors[keyof ResultsGetResultErrors];

export type ResultsGetResultResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UtilsHealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/utils/health-check/';
};

export type UtilsHealthCheckResponses = {
    /**
     * Successful Response
     */
    200: boolean;
};

export type UtilsHealthCheckResponse = UtilsHealthCheckResponses[keyof UtilsHealthCheckResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};