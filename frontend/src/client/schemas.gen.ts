// This file is auto-generated by @hey-api/openapi-ts

export const CMECMetricSchema = {
    properties: {
        DIMENSIONS: {
            '$ref': '#/components/schemas/MetricDimensions'
        },
        RESULTS: {
            additionalProperties: true,
            type: 'object',
            title: 'Results'
        },
        PROVENANCE: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Provenance'
        },
        DISCLAIMER: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Disclaimer'
        },
        NOTES: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Notes'
        }
    },
    additionalProperties: true,
    type: 'object',
    required: ['DIMENSIONS', 'RESULTS'],
    title: 'CMECMetric',
    description: `CMEC diagnostic bundle object

Contains the diagnostics calculated during a diagnostic execution, in a standardised format.`
} as const;

export const CMIP6DatasetMetadataSchema = {
    properties: {
        variable_id: {
            type: 'string',
            title: 'Variable Id'
        },
        source_id: {
            type: 'string',
            title: 'Source Id'
        },
        experiment_id: {
            type: 'string',
            title: 'Experiment Id'
        },
        variant_label: {
            type: 'string',
            title: 'Variant Label'
        }
    },
    type: 'object',
    required: ['variable_id', 'source_id', 'experiment_id', 'variant_label'],
    title: 'CMIP6DatasetMetadata'
} as const;

export const Collection_Dataset_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/Dataset'
            },
            type: 'array',
            title: 'Data'
        },
        total_count: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total Count'
        },
        count: {
            type: 'integer',
            title: 'Count',
            description: 'Number of data items present',
            readOnly: true
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'Collection[Dataset]'
} as const;

export const Collection_DiagnosticSummary_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/DiagnosticSummary'
            },
            type: 'array',
            title: 'Data'
        },
        total_count: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total Count'
        },
        count: {
            type: 'integer',
            title: 'Count',
            description: 'Number of data items present',
            readOnly: true
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'Collection[DiagnosticSummary]'
} as const;

export const Collection_ExecutionGroup_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/ExecutionGroup'
            },
            type: 'array',
            title: 'Data'
        },
        total_count: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total Count'
        },
        count: {
            type: 'integer',
            title: 'Count',
            description: 'Number of data items present',
            readOnly: true
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'Collection[ExecutionGroup]'
} as const;

export const Collection_Execution_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/Execution'
            },
            type: 'array',
            title: 'Data'
        },
        total_count: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total Count'
        },
        count: {
            type: 'integer',
            title: 'Count',
            description: 'Number of data items present',
            readOnly: true
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'Collection[Execution]'
} as const;

export const DatasetSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        slug: {
            type: 'string',
            title: 'Slug'
        },
        dataset_type: {
            type: 'string',
            title: 'Dataset Type'
        },
        metadata: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CMIP6DatasetMetadata'
                },
                {
                    type: 'null'
                }
            ]
        },
        more_info_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'More Info Url',
            readOnly: true
        }
    },
    type: 'object',
    required: ['id', 'slug', 'dataset_type', 'metadata', 'more_info_url'],
    title: 'Dataset'
} as const;

export const DiagnosticSummarySchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        provider: {
            '$ref': '#/components/schemas/ProviderSummary'
        },
        slug: {
            type: 'string',
            title: 'Slug'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        execution_groups: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Execution Groups'
        },
        has_metric_values: {
            type: 'boolean',
            title: 'Has Metric Values'
        },
        has_scalar_values: {
            type: 'boolean',
            title: 'Has Scalar Values'
        },
        has_series_values: {
            type: 'boolean',
            title: 'Has Series Values'
        },
        execution_count: {
            type: 'integer',
            title: 'Execution Count'
        },
        successful_execution_count: {
            type: 'integer',
            title: 'Successful Execution Count'
        },
        execution_group_count: {
            type: 'integer',
            title: 'Execution Group Count'
        },
        successful_execution_group_count: {
            type: 'integer',
            title: 'Successful Execution Group Count'
        },
        group_by: {
            items: {
                '$ref': '#/components/schemas/GroupBy'
            },
            type: 'array',
            title: 'Group By'
        }
    },
    type: 'object',
    required: ['id', 'provider', 'slug', 'name', 'description', 'execution_groups', 'has_metric_values', 'has_scalar_values', 'has_series_values', 'execution_count', 'successful_execution_count', 'execution_group_count', 'successful_execution_group_count', 'group_by'],
    title: 'DiagnosticSummary',
    description: 'A unique provider'
} as const;

export const ExecutionSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        dataset_hash: {
            type: 'string',
            title: 'Dataset Hash'
        },
        dataset_count: {
            type: 'integer',
            title: 'Dataset Count'
        },
        successful: {
            type: 'boolean',
            title: 'Successful'
        },
        retracted: {
            type: 'boolean',
            title: 'Retracted'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        outputs: {
            items: {
                '$ref': '#/components/schemas/ExecutionOutput'
            },
            type: 'array',
            title: 'Outputs'
        }
    },
    type: 'object',
    required: ['id', 'dataset_hash', 'dataset_count', 'successful', 'retracted', 'created_at', 'updated_at', 'outputs'],
    title: 'Execution'
} as const;

export const ExecutionGroupSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        key: {
            type: 'string',
            title: 'Key'
        },
        dirty: {
            type: 'boolean',
            title: 'Dirty'
        },
        executions: {
            items: {
                '$ref': '#/components/schemas/Execution'
            },
            type: 'array',
            title: 'Executions'
        },
        latest_execution: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Execution'
                },
                {
                    type: 'null'
                }
            ]
        },
        selectors: {
            additionalProperties: {
                items: {
                    prefixItems: [
                        {
                            type: 'string'
                        },
                        {
                            type: 'string'
                        }
                    ],
                    type: 'array',
                    maxItems: 2,
                    minItems: 2
                },
                type: 'array'
            },
            type: 'object',
            title: 'Selectors'
        },
        diagnostic: {
            '$ref': '#/components/schemas/DiagnosticSummary'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'key', 'dirty', 'executions', 'latest_execution', 'selectors', 'diagnostic', 'created_at', 'updated_at'],
    title: 'ExecutionGroup'
} as const;

export const ExecutionOutputSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        execution_id: {
            type: 'integer',
            title: 'Execution Id'
        },
        output_type: {
            '$ref': '#/components/schemas/ResultOutputType'
        },
        filename: {
            type: 'string',
            title: 'Filename'
        },
        short_name: {
            type: 'string',
            title: 'Short Name'
        },
        long_name: {
            type: 'string',
            title: 'Long Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        url: {
            type: 'string',
            title: 'Url'
        }
    },
    type: 'object',
    required: ['id', 'execution_id', 'output_type', 'filename', 'short_name', 'long_name', 'description', 'created_at', 'updated_at', 'url'],
    title: 'ExecutionOutput'
} as const;

export const ExecutionStatsSchema = {
    properties: {
        total_execution_groups: {
            type: 'integer',
            title: 'Total Execution Groups'
        },
        successful_execution_groups: {
            type: 'integer',
            title: 'Successful Execution Groups'
        },
        failed_execution_groups: {
            type: 'integer',
            title: 'Failed Execution Groups'
        },
        scalar_value_count: {
            type: 'integer',
            title: 'Scalar Value Count'
        },
        series_value_count: {
            type: 'integer',
            title: 'Series Value Count'
        },
        total_datasets: {
            type: 'integer',
            title: 'Total Datasets'
        },
        total_files: {
            type: 'integer',
            title: 'Total Files'
        },
        success_rate_percentage: {
            type: 'number',
            title: 'Success Rate Percentage',
            description: 'Success rate as a percentage (0-100).',
            readOnly: true
        }
    },
    type: 'object',
    required: ['total_execution_groups', 'successful_execution_groups', 'failed_execution_groups', 'scalar_value_count', 'series_value_count', 'total_datasets', 'total_files', 'success_rate_percentage'],
    title: 'ExecutionStats',
    description: 'Statistics for execution groups and their success rates.'
} as const;

export const FacetSchema = {
    properties: {
        key: {
            type: 'string',
            title: 'Key'
        },
        values: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Values'
        }
    },
    type: 'object',
    required: ['key', 'values'],
    title: 'Facet'
} as const;

export const GroupBySchema = {
    properties: {
        source_type: {
            type: 'string',
            title: 'Source Type'
        },
        group_by: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Group By'
        }
    },
    type: 'object',
    required: ['source_type', 'group_by'],
    title: 'GroupBy'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const MetricDimensionsSchema = {
    additionalProperties: true,
    type: 'object',
    title: 'MetricDimensions',
    description: `CMEC diagnostic bundle DIMENSIONS object

This describes the order of the dimensions and their possible values.
The order of the dimensions matter as that determines how the executions are nested.`,
    default: {
        json_structure: []
    }
} as const;

export const MetricValueSchema = {
    properties: {
        dimensions: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Dimensions'
        },
        value: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'integer'
                }
            ],
            title: 'Value'
        },
        attributes: {
            anyOf: [
                {
                    additionalProperties: {
                        anyOf: [
                            {
                                type: 'string'
                            },
                            {
                                type: 'number'
                            },
                            {
                                type: 'integer'
                            }
                        ]
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Attributes'
        },
        execution_group_id: {
            type: 'integer',
            title: 'Execution Group Id'
        },
        execution_id: {
            type: 'integer',
            title: 'Execution Id'
        }
    },
    type: 'object',
    required: ['dimensions', 'value', 'execution_group_id', 'execution_id'],
    title: 'MetricValue',
    description: `A flattened representation of a scalar diagnostic value

This includes the dimensions and the value of the diagnostic`
} as const;

export const MetricValueCollectionSchema = {
    properties: {
        data: {
            items: {
                anyOf: [
                    {
                        '$ref': '#/components/schemas/MetricValue'
                    },
                    {
                        '$ref': '#/components/schemas/SeriesValue'
                    }
                ]
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        },
        facets: {
            items: {
                '$ref': '#/components/schemas/Facet'
            },
            type: 'array',
            title: 'Facets'
        },
        types: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Types'
        }
    },
    type: 'object',
    required: ['data', 'count', 'facets', 'types'],
    title: 'MetricValueCollection'
} as const;

export const MetricValueComparisonSchema = {
    properties: {
        source: {
            '$ref': '#/components/schemas/MetricValueCollection'
        },
        ensemble: {
            '$ref': '#/components/schemas/MetricValueCollection'
        }
    },
    type: 'object',
    required: ['source', 'ensemble'],
    title: 'MetricValueComparison',
    description: 'A comparison of metric values for a specific source against n ensemble.'
} as const;

export const MetricValueFacetSummarySchema = {
    properties: {
        dimensions: {
            additionalProperties: {
                items: {
                    type: 'string'
                },
                type: 'array'
            },
            type: 'object',
            title: 'Dimensions'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['dimensions', 'count'],
    title: 'MetricValueFacetSummary',
    description: 'Summary of the dimensions used in a metric value collection.'
} as const;

export const ProviderSummarySchema = {
    properties: {
        slug: {
            type: 'string',
            title: 'Slug'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['slug', 'name'],
    title: 'ProviderSummary',
    description: `Summary information about a Metric Provider.

The diagnostic provider is the framework that was used to generate a set of metrics.`
} as const;

export const ResultOutputTypeSchema = {
    type: 'string',
    enum: ['plot', 'data', 'html'],
    title: 'ResultOutputType',
    description: `Types of supported outputs

These map to the categories of output in the CMEC output bundle`
} as const;

export const SeriesValueSchema = {
    properties: {
        dimensions: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Dimensions'
        },
        values: {
            items: {
                type: 'number'
            },
            type: 'array',
            title: 'Values'
        },
        index: {
            anyOf: [
                {
                    items: {
                        anyOf: [
                            {
                                type: 'string'
                            },
                            {
                                type: 'number'
                            }
                        ]
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Index'
        },
        index_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Index Name'
        },
        attributes: {
            anyOf: [
                {
                    additionalProperties: {
                        anyOf: [
                            {
                                type: 'string'
                            },
                            {
                                type: 'number'
                            }
                        ]
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Attributes'
        },
        execution_group_id: {
            type: 'integer',
            title: 'Execution Group Id'
        },
        execution_id: {
            type: 'integer',
            title: 'Execution Id'
        }
    },
    type: 'object',
    required: ['dimensions', 'values', 'execution_group_id', 'execution_id'],
    title: 'SeriesValue',
    description: `A flattened representation of a series diagnostic value

This includes the dimensions, values array, index array, and index name`
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;