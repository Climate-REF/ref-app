// This file is auto-generated by @hey-api/openapi-ts

export const CMECMetricSchema = {
    properties: {
        DIMENSIONS: {
            '$ref': '#/components/schemas/MetricDimensions'
        },
        RESULTS: {
            type: 'object',
            title: 'Results'
        },
        PROVENANCE: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Provenance'
        },
        DISCLAIMER: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Disclaimer'
        },
        NOTES: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Notes'
        }
    },
    additionalProperties: true,
    type: 'object',
    required: ['DIMENSIONS', 'RESULTS'],
    title: 'CMECMetric',
    description: `CMEC metric bundle object

Contains the metrics calculated during a metric execution, in a standardised format.`
} as const;

export const CMIP6DatasetMetadataSchema = {
    properties: {
        variable_id: {
            type: 'string',
            title: 'Variable Id'
        },
        source_id: {
            type: 'string',
            title: 'Source Id'
        },
        experiment_id: {
            type: 'string',
            title: 'Experiment Id'
        },
        variant_label: {
            type: 'string',
            title: 'Variant Label'
        }
    },
    type: 'object',
    required: ['variable_id', 'source_id', 'experiment_id', 'variant_label'],
    title: 'CMIP6DatasetMetadata'
} as const;

export const Collection_MetricExecutionGroup_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/MetricExecutionGroup'
            },
            type: 'array',
            title: 'Data'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'Collection[MetricExecutionGroup]'
} as const;

export const Collection_MetricSummary_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/MetricSummary'
            },
            type: 'array',
            title: 'Data'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'Collection[MetricSummary]'
} as const;

export const DatasetSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        slug: {
            type: 'string',
            title: 'Slug'
        },
        dataset_type: {
            type: 'string',
            title: 'Dataset Type'
        },
        metadata: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CMIP6DatasetMetadata'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['id', 'slug', 'dataset_type', 'metadata'],
    title: 'Dataset'
} as const;

export const DatasetCollectionSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/Dataset'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'DatasetCollection'
} as const;

export const FacetSchema = {
    properties: {
        key: {
            type: 'string',
            title: 'Key'
        },
        values: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Values'
        }
    },
    type: 'object',
    required: ['key', 'values'],
    title: 'Facet'
} as const;

export const GroupBySchema = {
    properties: {
        source_type: {
            type: 'string',
            title: 'Source Type'
        },
        group_by: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Group By'
        }
    },
    type: 'object',
    required: ['source_type', 'group_by'],
    title: 'GroupBy'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const MetricDimensionsSchema = {
    type: 'object',
    title: 'MetricDimensions',
    description: `CMEC metric bundle DIMENSIONS object

This describes the order of the dimensions and their possible values.
The order of the dimensions matter as that determines how the results are nested.`,
    default: {
        json_structure: ['model', 'metric'],
        model: {},
        metric: {}
    }
} as const;

export const MetricExecutionGroupSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        key: {
            type: 'string',
            title: 'Key'
        },
        results: {
            items: {
                '$ref': '#/components/schemas/MetricExecutionResult'
            },
            type: 'array',
            title: 'Results'
        },
        latest_result: {
            '$ref': '#/components/schemas/MetricExecutionResult'
        },
        outputs: {
            items: {
                '$ref': '#/components/schemas/ResultOutput'
            },
            type: 'array',
            title: 'Outputs'
        },
        selectors: {
            additionalProperties: {
                items: {
                    prefixItems: [
                        {
                            type: 'string'
                        },
                        {
                            type: 'string'
                        }
                    ],
                    type: 'array',
                    maxItems: 2,
                    minItems: 2
                },
                type: 'array'
            },
            type: 'object',
            title: 'Selectors'
        },
        metric: {
            '$ref': '#/components/schemas/MetricSummary'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'key', 'results', 'latest_result', 'outputs', 'selectors', 'metric', 'created_at', 'updated_at'],
    title: 'MetricExecutionGroup'
} as const;

export const MetricExecutionResultSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        dataset_hash: {
            type: 'string',
            title: 'Dataset Hash'
        },
        dataset_count: {
            type: 'integer',
            title: 'Dataset Count'
        },
        successful: {
            type: 'boolean',
            title: 'Successful'
        },
        retracted: {
            type: 'boolean',
            title: 'Retracted'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'dataset_hash', 'dataset_count', 'successful', 'retracted', 'created_at', 'updated_at'],
    title: 'MetricExecutionResult'
} as const;

export const MetricExecutionsSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/MetricExecutionGroup'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'MetricExecutions'
} as const;

export const MetricSummarySchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        provider: {
            '$ref': '#/components/schemas/ProviderSummary'
        },
        slug: {
            type: 'string',
            title: 'Slug'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        metric_executions: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Metric Executions'
        },
        group_by: {
            items: {
                '$ref': '#/components/schemas/GroupBy'
            },
            type: 'array',
            title: 'Group By'
        }
    },
    type: 'object',
    required: ['id', 'provider', 'slug', 'name', 'description', 'metric_executions', 'group_by'],
    title: 'MetricSummary',
    description: 'A unique provider'
} as const;

export const MetricValueSchema = {
    properties: {
        dimensions: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Dimensions'
        },
        value: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'string'
                }
            ],
            title: 'Value'
        },
        attributes: {
            anyOf: [
                {
                    additionalProperties: {
                        anyOf: [
                            {
                                type: 'string'
                            },
                            {
                                type: 'number'
                            },
                            {
                                type: 'integer'
                            }
                        ]
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Attributes'
        },
        execution_group_id: {
            type: 'integer',
            title: 'Execution Group Id'
        },
        result_id: {
            type: 'integer',
            title: 'Result Id'
        }
    },
    type: 'object',
    required: ['dimensions', 'value', 'execution_group_id', 'result_id'],
    title: 'MetricValue',
    description: `A flattened representation of a metric value

This includes the dimensions and the value of the metric`
} as const;

export const ProviderSummarySchema = {
    properties: {
        slug: {
            type: 'string',
            title: 'Slug'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['slug', 'name'],
    title: 'ProviderSummary',
    description: `Summary information about a Metric Provider.

The metric provider is the framework that was used to generate a set of metrics.`
} as const;

export const ResultOutputSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        output_type: {
            '$ref': '#/components/schemas/ResultOutputType'
        },
        filename: {
            type: 'string',
            title: 'Filename'
        },
        short_name: {
            type: 'string',
            title: 'Short Name'
        },
        long_name: {
            type: 'string',
            title: 'Long Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        url: {
            type: 'string',
            title: 'Url'
        }
    },
    type: 'object',
    required: ['id', 'output_type', 'filename', 'short_name', 'long_name', 'description', 'created_at', 'updated_at', 'url'],
    title: 'ResultOutput'
} as const;

export const ResultOutputTypeSchema = {
    type: 'string',
    enum: ['plot', 'data', 'html'],
    title: 'ResultOutputType',
    description: `Types of supported outputs

These map to the categories of output in the CMEC output bundle`
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const ValueCollectionSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/MetricValue'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        },
        facets: {
            items: {
                '$ref': '#/components/schemas/Facet'
            },
            type: 'array',
            title: 'Facets'
        }
    },
    type: 'object',
    required: ['data', 'count', 'facets'],
    title: 'ValueCollection'
} as const;