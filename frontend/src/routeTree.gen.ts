/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ContentRouteImport } from './routes/content/route'
import { Route as AppRouteImport } from './routes/_app/route'
import { Route as IndexImport } from './routes/index'
import { Route as ContentAboutImport } from './routes/content/about'
import { Route as AppExplorerImport } from './routes/_app/explorer'
import { Route as AppExecutionsImport } from './routes/_app/executions'
import { Route as AppMetricsIndexImport } from './routes/_app/metrics.index'
import { Route as AppExecutionsGroupIdImport } from './routes/_app/executions.$groupId'
import { Route as AppMetricsProviderSlugMetricSlugImport } from './routes/_app/metrics.$providerSlug.$metricSlug'

// Create/Update Routes

const ContentRouteRoute = ContentRouteImport.update({
  id: '/content',
  path: '/content',
  getParentRoute: () => rootRoute,
} as any)

const AppRouteRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ContentAboutRoute = ContentAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => ContentRouteRoute,
} as any)

const AppExplorerRoute = AppExplorerImport.update({
  id: '/explorer',
  path: '/explorer',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppExecutionsRoute = AppExecutionsImport.update({
  id: '/executions',
  path: '/executions',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppMetricsIndexRoute = AppMetricsIndexImport.update({
  id: '/metrics/',
  path: '/metrics/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppExecutionsGroupIdRoute = AppExecutionsGroupIdImport.update({
  id: '/$groupId',
  path: '/$groupId',
  getParentRoute: () => AppExecutionsRoute,
} as any)

const AppMetricsProviderSlugMetricSlugRoute =
  AppMetricsProviderSlugMetricSlugImport.update({
    id: '/metrics/$providerSlug/$metricSlug',
    path: '/metrics/$providerSlug/$metricSlug',
    getParentRoute: () => AppRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/content': {
      id: '/content'
      path: '/content'
      fullPath: '/content'
      preLoaderRoute: typeof ContentRouteImport
      parentRoute: typeof rootRoute
    }
    '/_app/executions': {
      id: '/_app/executions'
      path: '/executions'
      fullPath: '/executions'
      preLoaderRoute: typeof AppExecutionsImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/explorer': {
      id: '/_app/explorer'
      path: '/explorer'
      fullPath: '/explorer'
      preLoaderRoute: typeof AppExplorerImport
      parentRoute: typeof AppRouteImport
    }
    '/content/about': {
      id: '/content/about'
      path: '/about'
      fullPath: '/content/about'
      preLoaderRoute: typeof ContentAboutImport
      parentRoute: typeof ContentRouteImport
    }
    '/_app/executions/$groupId': {
      id: '/_app/executions/$groupId'
      path: '/$groupId'
      fullPath: '/executions/$groupId'
      preLoaderRoute: typeof AppExecutionsGroupIdImport
      parentRoute: typeof AppExecutionsImport
    }
    '/_app/metrics/': {
      id: '/_app/metrics/'
      path: '/metrics'
      fullPath: '/metrics'
      preLoaderRoute: typeof AppMetricsIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/metrics/$providerSlug/$metricSlug': {
      id: '/_app/metrics/$providerSlug/$metricSlug'
      path: '/metrics/$providerSlug/$metricSlug'
      fullPath: '/metrics/$providerSlug/$metricSlug'
      preLoaderRoute: typeof AppMetricsProviderSlugMetricSlugImport
      parentRoute: typeof AppRouteImport
    }
  }
}

// Create and export the route tree

interface AppExecutionsRouteChildren {
  AppExecutionsGroupIdRoute: typeof AppExecutionsGroupIdRoute
}

const AppExecutionsRouteChildren: AppExecutionsRouteChildren = {
  AppExecutionsGroupIdRoute: AppExecutionsGroupIdRoute,
}

const AppExecutionsRouteWithChildren = AppExecutionsRoute._addFileChildren(
  AppExecutionsRouteChildren,
)

interface AppRouteRouteChildren {
  AppExecutionsRoute: typeof AppExecutionsRouteWithChildren
  AppExplorerRoute: typeof AppExplorerRoute
  AppMetricsIndexRoute: typeof AppMetricsIndexRoute
  AppMetricsProviderSlugMetricSlugRoute: typeof AppMetricsProviderSlugMetricSlugRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppExecutionsRoute: AppExecutionsRouteWithChildren,
  AppExplorerRoute: AppExplorerRoute,
  AppMetricsIndexRoute: AppMetricsIndexRoute,
  AppMetricsProviderSlugMetricSlugRoute: AppMetricsProviderSlugMetricSlugRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface ContentRouteRouteChildren {
  ContentAboutRoute: typeof ContentAboutRoute
}

const ContentRouteRouteChildren: ContentRouteRouteChildren = {
  ContentAboutRoute: ContentAboutRoute,
}

const ContentRouteRouteWithChildren = ContentRouteRoute._addFileChildren(
  ContentRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AppRouteRouteWithChildren
  '/content': typeof ContentRouteRouteWithChildren
  '/executions': typeof AppExecutionsRouteWithChildren
  '/explorer': typeof AppExplorerRoute
  '/content/about': typeof ContentAboutRoute
  '/executions/$groupId': typeof AppExecutionsGroupIdRoute
  '/metrics': typeof AppMetricsIndexRoute
  '/metrics/$providerSlug/$metricSlug': typeof AppMetricsProviderSlugMetricSlugRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AppRouteRouteWithChildren
  '/content': typeof ContentRouteRouteWithChildren
  '/executions': typeof AppExecutionsRouteWithChildren
  '/explorer': typeof AppExplorerRoute
  '/content/about': typeof ContentAboutRoute
  '/executions/$groupId': typeof AppExecutionsGroupIdRoute
  '/metrics': typeof AppMetricsIndexRoute
  '/metrics/$providerSlug/$metricSlug': typeof AppMetricsProviderSlugMetricSlugRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_app': typeof AppRouteRouteWithChildren
  '/content': typeof ContentRouteRouteWithChildren
  '/_app/executions': typeof AppExecutionsRouteWithChildren
  '/_app/explorer': typeof AppExplorerRoute
  '/content/about': typeof ContentAboutRoute
  '/_app/executions/$groupId': typeof AppExecutionsGroupIdRoute
  '/_app/metrics/': typeof AppMetricsIndexRoute
  '/_app/metrics/$providerSlug/$metricSlug': typeof AppMetricsProviderSlugMetricSlugRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/content'
    | '/executions'
    | '/explorer'
    | '/content/about'
    | '/executions/$groupId'
    | '/metrics'
    | '/metrics/$providerSlug/$metricSlug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/content'
    | '/executions'
    | '/explorer'
    | '/content/about'
    | '/executions/$groupId'
    | '/metrics'
    | '/metrics/$providerSlug/$metricSlug'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/content'
    | '/_app/executions'
    | '/_app/explorer'
    | '/content/about'
    | '/_app/executions/$groupId'
    | '/_app/metrics/'
    | '/_app/metrics/$providerSlug/$metricSlug'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  ContentRouteRoute: typeof ContentRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  ContentRouteRoute: ContentRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_app",
        "/content"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_app": {
      "filePath": "_app/route.tsx",
      "children": [
        "/_app/executions",
        "/_app/explorer",
        "/_app/metrics/",
        "/_app/metrics/$providerSlug/$metricSlug"
      ]
    },
    "/content": {
      "filePath": "content/route.tsx",
      "children": [
        "/content/about"
      ]
    },
    "/_app/executions": {
      "filePath": "_app/executions.tsx",
      "parent": "/_app",
      "children": [
        "/_app/executions/$groupId"
      ]
    },
    "/_app/explorer": {
      "filePath": "_app/explorer.tsx",
      "parent": "/_app"
    },
    "/content/about": {
      "filePath": "content/about.ts",
      "parent": "/content"
    },
    "/_app/executions/$groupId": {
      "filePath": "_app/executions.$groupId.tsx",
      "parent": "/_app/executions"
    },
    "/_app/metrics/": {
      "filePath": "_app/metrics.index.tsx",
      "parent": "/_app"
    },
    "/_app/metrics/$providerSlug/$metricSlug": {
      "filePath": "_app/metrics.$providerSlug.$metricSlug.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
