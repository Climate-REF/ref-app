/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ContentRouteImport } from './routes/content/route'
import { Route as AppRouteImport } from './routes/_app/route'
import { Route as IndexImport } from './routes/index'
import { Route as ContentAboutImport } from './routes/content/about'
import { Route as AppExplorerImport } from './routes/_app/explorer'
import { Route as AppExecutionsIndexImport } from './routes/_app/executions.index'
import { Route as AppDiagnosticsIndexImport } from './routes/_app/diagnostics.index'
import { Route as AppDatasetsIndexImport } from './routes/_app/datasets.index'
import { Route as AppExecutionsGroupIdImport } from './routes/_app/executions.$groupId'
import { Route as AppDatasetsSlugImport } from './routes/_app/datasets.$slug'
import { Route as AppDiagnosticsProviderSlugDiagnosticSlugImport } from './routes/_app/diagnostics.$providerSlug.$diagnosticSlug'

// Create/Update Routes

const ContentRouteRoute = ContentRouteImport.update({
  id: '/content',
  path: '/content',
  getParentRoute: () => rootRoute,
} as any)

const AppRouteRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ContentAboutRoute = ContentAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => ContentRouteRoute,
} as any)

const AppExplorerRoute = AppExplorerImport.update({
  id: '/explorer',
  path: '/explorer',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppExecutionsIndexRoute = AppExecutionsIndexImport.update({
  id: '/executions/',
  path: '/executions/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppDiagnosticsIndexRoute = AppDiagnosticsIndexImport.update({
  id: '/diagnostics/',
  path: '/diagnostics/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppDatasetsIndexRoute = AppDatasetsIndexImport.update({
  id: '/datasets/',
  path: '/datasets/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppExecutionsGroupIdRoute = AppExecutionsGroupIdImport.update({
  id: '/executions/$groupId',
  path: '/executions/$groupId',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppDatasetsSlugRoute = AppDatasetsSlugImport.update({
  id: '/datasets/$slug',
  path: '/datasets/$slug',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppDiagnosticsProviderSlugDiagnosticSlugRoute =
  AppDiagnosticsProviderSlugDiagnosticSlugImport.update({
    id: '/diagnostics/$providerSlug/$diagnosticSlug',
    path: '/diagnostics/$providerSlug/$diagnosticSlug',
    getParentRoute: () => AppRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/content': {
      id: '/content'
      path: '/content'
      fullPath: '/content'
      preLoaderRoute: typeof ContentRouteImport
      parentRoute: typeof rootRoute
    }
    '/_app/explorer': {
      id: '/_app/explorer'
      path: '/explorer'
      fullPath: '/explorer'
      preLoaderRoute: typeof AppExplorerImport
      parentRoute: typeof AppRouteImport
    }
    '/content/about': {
      id: '/content/about'
      path: '/about'
      fullPath: '/content/about'
      preLoaderRoute: typeof ContentAboutImport
      parentRoute: typeof ContentRouteImport
    }
    '/_app/datasets/$slug': {
      id: '/_app/datasets/$slug'
      path: '/datasets/$slug'
      fullPath: '/datasets/$slug'
      preLoaderRoute: typeof AppDatasetsSlugImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/executions/$groupId': {
      id: '/_app/executions/$groupId'
      path: '/executions/$groupId'
      fullPath: '/executions/$groupId'
      preLoaderRoute: typeof AppExecutionsGroupIdImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/datasets/': {
      id: '/_app/datasets/'
      path: '/datasets'
      fullPath: '/datasets'
      preLoaderRoute: typeof AppDatasetsIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/diagnostics/': {
      id: '/_app/diagnostics/'
      path: '/diagnostics'
      fullPath: '/diagnostics'
      preLoaderRoute: typeof AppDiagnosticsIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/executions/': {
      id: '/_app/executions/'
      path: '/executions'
      fullPath: '/executions'
      preLoaderRoute: typeof AppExecutionsIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/diagnostics/$providerSlug/$diagnosticSlug': {
      id: '/_app/diagnostics/$providerSlug/$diagnosticSlug'
      path: '/diagnostics/$providerSlug/$diagnosticSlug'
      fullPath: '/diagnostics/$providerSlug/$diagnosticSlug'
      preLoaderRoute: typeof AppDiagnosticsProviderSlugDiagnosticSlugImport
      parentRoute: typeof AppRouteImport
    }
  }
}

// Create and export the route tree

interface AppRouteRouteChildren {
  AppExplorerRoute: typeof AppExplorerRoute
  AppDatasetsSlugRoute: typeof AppDatasetsSlugRoute
  AppExecutionsGroupIdRoute: typeof AppExecutionsGroupIdRoute
  AppDatasetsIndexRoute: typeof AppDatasetsIndexRoute
  AppDiagnosticsIndexRoute: typeof AppDiagnosticsIndexRoute
  AppExecutionsIndexRoute: typeof AppExecutionsIndexRoute
  AppDiagnosticsProviderSlugDiagnosticSlugRoute: typeof AppDiagnosticsProviderSlugDiagnosticSlugRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppExplorerRoute: AppExplorerRoute,
  AppDatasetsSlugRoute: AppDatasetsSlugRoute,
  AppExecutionsGroupIdRoute: AppExecutionsGroupIdRoute,
  AppDatasetsIndexRoute: AppDatasetsIndexRoute,
  AppDiagnosticsIndexRoute: AppDiagnosticsIndexRoute,
  AppExecutionsIndexRoute: AppExecutionsIndexRoute,
  AppDiagnosticsProviderSlugDiagnosticSlugRoute:
    AppDiagnosticsProviderSlugDiagnosticSlugRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface ContentRouteRouteChildren {
  ContentAboutRoute: typeof ContentAboutRoute
}

const ContentRouteRouteChildren: ContentRouteRouteChildren = {
  ContentAboutRoute: ContentAboutRoute,
}

const ContentRouteRouteWithChildren = ContentRouteRoute._addFileChildren(
  ContentRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AppRouteRouteWithChildren
  '/content': typeof ContentRouteRouteWithChildren
  '/explorer': typeof AppExplorerRoute
  '/content/about': typeof ContentAboutRoute
  '/datasets/$slug': typeof AppDatasetsSlugRoute
  '/executions/$groupId': typeof AppExecutionsGroupIdRoute
  '/datasets': typeof AppDatasetsIndexRoute
  '/diagnostics': typeof AppDiagnosticsIndexRoute
  '/executions': typeof AppExecutionsIndexRoute
  '/diagnostics/$providerSlug/$diagnosticSlug': typeof AppDiagnosticsProviderSlugDiagnosticSlugRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AppRouteRouteWithChildren
  '/content': typeof ContentRouteRouteWithChildren
  '/explorer': typeof AppExplorerRoute
  '/content/about': typeof ContentAboutRoute
  '/datasets/$slug': typeof AppDatasetsSlugRoute
  '/executions/$groupId': typeof AppExecutionsGroupIdRoute
  '/datasets': typeof AppDatasetsIndexRoute
  '/diagnostics': typeof AppDiagnosticsIndexRoute
  '/executions': typeof AppExecutionsIndexRoute
  '/diagnostics/$providerSlug/$diagnosticSlug': typeof AppDiagnosticsProviderSlugDiagnosticSlugRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_app': typeof AppRouteRouteWithChildren
  '/content': typeof ContentRouteRouteWithChildren
  '/_app/explorer': typeof AppExplorerRoute
  '/content/about': typeof ContentAboutRoute
  '/_app/datasets/$slug': typeof AppDatasetsSlugRoute
  '/_app/executions/$groupId': typeof AppExecutionsGroupIdRoute
  '/_app/datasets/': typeof AppDatasetsIndexRoute
  '/_app/diagnostics/': typeof AppDiagnosticsIndexRoute
  '/_app/executions/': typeof AppExecutionsIndexRoute
  '/_app/diagnostics/$providerSlug/$diagnosticSlug': typeof AppDiagnosticsProviderSlugDiagnosticSlugRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/content'
    | '/explorer'
    | '/content/about'
    | '/datasets/$slug'
    | '/executions/$groupId'
    | '/datasets'
    | '/diagnostics'
    | '/executions'
    | '/diagnostics/$providerSlug/$diagnosticSlug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/content'
    | '/explorer'
    | '/content/about'
    | '/datasets/$slug'
    | '/executions/$groupId'
    | '/datasets'
    | '/diagnostics'
    | '/executions'
    | '/diagnostics/$providerSlug/$diagnosticSlug'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/content'
    | '/_app/explorer'
    | '/content/about'
    | '/_app/datasets/$slug'
    | '/_app/executions/$groupId'
    | '/_app/datasets/'
    | '/_app/diagnostics/'
    | '/_app/executions/'
    | '/_app/diagnostics/$providerSlug/$diagnosticSlug'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  ContentRouteRoute: typeof ContentRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  ContentRouteRoute: ContentRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_app",
        "/content"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_app": {
      "filePath": "_app/route.tsx",
      "children": [
        "/_app/explorer",
        "/_app/datasets/$slug",
        "/_app/executions/$groupId",
        "/_app/datasets/",
        "/_app/diagnostics/",
        "/_app/executions/",
        "/_app/diagnostics/$providerSlug/$diagnosticSlug"
      ]
    },
    "/content": {
      "filePath": "content/route.tsx",
      "children": [
        "/content/about"
      ]
    },
    "/_app/explorer": {
      "filePath": "_app/explorer.tsx",
      "parent": "/_app"
    },
    "/content/about": {
      "filePath": "content/about.ts",
      "parent": "/content"
    },
    "/_app/datasets/$slug": {
      "filePath": "_app/datasets.$slug.tsx",
      "parent": "/_app"
    },
    "/_app/executions/$groupId": {
      "filePath": "_app/executions.$groupId.tsx",
      "parent": "/_app"
    },
    "/_app/datasets/": {
      "filePath": "_app/datasets.index.tsx",
      "parent": "/_app"
    },
    "/_app/diagnostics/": {
      "filePath": "_app/diagnostics.index.tsx",
      "parent": "/_app"
    },
    "/_app/executions/": {
      "filePath": "_app/executions.index.tsx",
      "parent": "/_app"
    },
    "/_app/diagnostics/$providerSlug/$diagnosticSlug": {
      "filePath": "_app/diagnostics.$providerSlug.$diagnosticSlug.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
