/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MetricsImport } from './routes/metrics'
import { Route as ExplorerImport } from './routes/explorer'
import { Route as ExecutionsImport } from './routes/executions'
import { Route as IndexImport } from './routes/index'
import { Route as ExecutionsGroupIdImport } from './routes/executions.$groupId'
import { Route as MetricsProviderSlugMetricSlugImport } from './routes/metrics.$providerSlug.$metricSlug'

// Create/Update Routes

const MetricsRoute = MetricsImport.update({
  id: '/metrics',
  path: '/metrics',
  getParentRoute: () => rootRoute,
} as any)

const ExplorerRoute = ExplorerImport.update({
  id: '/explorer',
  path: '/explorer',
  getParentRoute: () => rootRoute,
} as any)

const ExecutionsRoute = ExecutionsImport.update({
  id: '/executions',
  path: '/executions',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ExecutionsGroupIdRoute = ExecutionsGroupIdImport.update({
  id: '/$groupId',
  path: '/$groupId',
  getParentRoute: () => ExecutionsRoute,
} as any)

const MetricsProviderSlugMetricSlugRoute =
  MetricsProviderSlugMetricSlugImport.update({
    id: '/$providerSlug/$metricSlug',
    path: '/$providerSlug/$metricSlug',
    getParentRoute: () => MetricsRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/executions': {
      id: '/executions'
      path: '/executions'
      fullPath: '/executions'
      preLoaderRoute: typeof ExecutionsImport
      parentRoute: typeof rootRoute
    }
    '/explorer': {
      id: '/explorer'
      path: '/explorer'
      fullPath: '/explorer'
      preLoaderRoute: typeof ExplorerImport
      parentRoute: typeof rootRoute
    }
    '/metrics': {
      id: '/metrics'
      path: '/metrics'
      fullPath: '/metrics'
      preLoaderRoute: typeof MetricsImport
      parentRoute: typeof rootRoute
    }
    '/executions/$groupId': {
      id: '/executions/$groupId'
      path: '/$groupId'
      fullPath: '/executions/$groupId'
      preLoaderRoute: typeof ExecutionsGroupIdImport
      parentRoute: typeof ExecutionsImport
    }
    '/metrics/$providerSlug/$metricSlug': {
      id: '/metrics/$providerSlug/$metricSlug'
      path: '/$providerSlug/$metricSlug'
      fullPath: '/metrics/$providerSlug/$metricSlug'
      preLoaderRoute: typeof MetricsProviderSlugMetricSlugImport
      parentRoute: typeof MetricsImport
    }
  }
}

// Create and export the route tree

interface ExecutionsRouteChildren {
  ExecutionsGroupIdRoute: typeof ExecutionsGroupIdRoute
}

const ExecutionsRouteChildren: ExecutionsRouteChildren = {
  ExecutionsGroupIdRoute: ExecutionsGroupIdRoute,
}

const ExecutionsRouteWithChildren = ExecutionsRoute._addFileChildren(
  ExecutionsRouteChildren,
)

interface MetricsRouteChildren {
  MetricsProviderSlugMetricSlugRoute: typeof MetricsProviderSlugMetricSlugRoute
}

const MetricsRouteChildren: MetricsRouteChildren = {
  MetricsProviderSlugMetricSlugRoute: MetricsProviderSlugMetricSlugRoute,
}

const MetricsRouteWithChildren =
  MetricsRoute._addFileChildren(MetricsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/executions': typeof ExecutionsRouteWithChildren
  '/explorer': typeof ExplorerRoute
  '/metrics': typeof MetricsRouteWithChildren
  '/executions/$groupId': typeof ExecutionsGroupIdRoute
  '/metrics/$providerSlug/$metricSlug': typeof MetricsProviderSlugMetricSlugRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/executions': typeof ExecutionsRouteWithChildren
  '/explorer': typeof ExplorerRoute
  '/metrics': typeof MetricsRouteWithChildren
  '/executions/$groupId': typeof ExecutionsGroupIdRoute
  '/metrics/$providerSlug/$metricSlug': typeof MetricsProviderSlugMetricSlugRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/executions': typeof ExecutionsRouteWithChildren
  '/explorer': typeof ExplorerRoute
  '/metrics': typeof MetricsRouteWithChildren
  '/executions/$groupId': typeof ExecutionsGroupIdRoute
  '/metrics/$providerSlug/$metricSlug': typeof MetricsProviderSlugMetricSlugRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/executions'
    | '/explorer'
    | '/metrics'
    | '/executions/$groupId'
    | '/metrics/$providerSlug/$metricSlug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/executions'
    | '/explorer'
    | '/metrics'
    | '/executions/$groupId'
    | '/metrics/$providerSlug/$metricSlug'
  id:
    | '__root__'
    | '/'
    | '/executions'
    | '/explorer'
    | '/metrics'
    | '/executions/$groupId'
    | '/metrics/$providerSlug/$metricSlug'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ExecutionsRoute: typeof ExecutionsRouteWithChildren
  ExplorerRoute: typeof ExplorerRoute
  MetricsRoute: typeof MetricsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ExecutionsRoute: ExecutionsRouteWithChildren,
  ExplorerRoute: ExplorerRoute,
  MetricsRoute: MetricsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/executions",
        "/explorer",
        "/metrics"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/executions": {
      "filePath": "executions.tsx",
      "children": [
        "/executions/$groupId"
      ]
    },
    "/explorer": {
      "filePath": "explorer.tsx"
    },
    "/metrics": {
      "filePath": "metrics.tsx",
      "children": [
        "/metrics/$providerSlug/$metricSlug"
      ]
    },
    "/executions/$groupId": {
      "filePath": "executions.$groupId.tsx",
      "parent": "/executions"
    },
    "/metrics/$providerSlug/$metricSlug": {
      "filePath": "metrics.$providerSlug.$metricSlug.tsx",
      "parent": "/metrics"
    }
  }
}
ROUTE_MANIFEST_END */
